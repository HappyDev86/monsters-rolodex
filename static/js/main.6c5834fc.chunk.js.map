{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","react_default","a","createElement","className","alt","monster","name","src","concat","id","email","CardList","monsters","map","card_component_Card","key","SearchBox","_ref","placeholder","handleChange","type","onChange","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","e","setState","searchField","target","value","state","_this2","fetch","then","response","json","users","_this$state","filteredMonstersName","toLowerCase","split","filter","monsterName","startsWith","join","filteredMonsters","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","mon","includes","length","err","return","search_box_component_SearchBox","card_list_component_CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oTAKaA,SAAO,SAAAC,GAAK,OACrBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,OAAKE,IAAKL,EAAMM,QAAQC,KACnBC,IAAG,wBAAAC,OAA0BT,EAAMM,QAAQI,GAAxC,4BACRT,EAAAC,EAAAC,cAAA,UAAMH,EAAMM,QAAQC,MACpBN,EAAAC,EAAAC,cAAA,SAAKH,EAAMM,QAAQK,UCHdC,SAAW,SAAAZ,GAAK,OACzBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACVJ,EAAMa,SAASC,IAAI,SAAAR,GAAO,OACvBL,EAAAC,EAAAC,cAACY,EAAD,CAAMC,IAAMV,EAAQI,GAAKJ,QAAUA,SCLlCW,SAAY,SAAAC,GAAA,IAAEC,EAAFD,EAAEC,YAAaC,EAAfF,EAAeE,aAAf,OACrBnB,EAAAC,EAAAC,cAAA,SAAQC,UAAU,SACViB,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCgDPG,qBAjDb,SAAAA,IAAe,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACbC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAaFP,aAAe,SAAAW,GAAC,OAAIP,EAAKQ,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAZvDX,EAAKY,MAAQ,CACXvB,SAAU,GACVoB,YAAa,IAJFT,mFAQK,IAAAa,EAAAV,KAClBW,MAAM,8CACLC,KAAM,SAAAC,GAAQ,OAAIA,EAASC,SAC3BF,KAAM,SAAAG,GAAK,OAAIL,EAAKL,SAAS,CAACnB,SAAU6B,uCAKjC,IAAAC,EAC0BhB,KAAKS,MAA/BvB,EADA8B,EACA9B,SAAUoB,EADVU,EACUV,YAGZW,EAAuB/B,EAASC,IAAI,SAAAR,GAAO,OAAIA,EAAQC,KACxDsC,cACAC,MAAM,KACNC,OAAO,SAAAC,GAAW,OAAIA,EAAYC,WAAWhB,EAAYY,iBACzDK,KAAK,OAGJC,EAAmBtC,EAASkC,OAAQ,SAAAzC,GAAW,IAAA8C,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IACnD,QAAAC,EAAAC,EAAgBb,EAAhBc,OAAAC,cAAAP,GAAAI,EAAAC,EAAAG,QAAAC,MAAAT,GAAA,EAAqC,KAA5BU,EAA4BN,EAAArB,MACnC,GAAI7B,EAAQC,KAAKsC,cAAckB,SAASD,IAAQA,EAAIE,OAAS,EAC3D,OAAO1D,GAHwC,MAAA2D,GAAAZ,GAAA,EAAAC,EAAAW,EAAA,YAAAb,GAAA,MAAAK,EAAAS,QAAAT,EAAAS,SAAA,WAAAb,EAAA,MAAAC,GAMnD,OAAO,OAGT,OACErD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAACgE,EAAD,CACEhD,YAAY,qBACZC,aAAcO,KAAKP,eAErBnB,EAAAC,EAAAC,cAACiE,EAAD,CAAUvD,SAAUsC,YA5CVkB,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3E,EAAAC,EAAAC,cAAC0E,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3C,KAAK,SAAA4C,GACjCA,EAAaC","file":"static/js/main.6c5834fc.chunk.js","sourcesContent":["import React from 'react';\n\nimport './card.styles.css';\n\n\nexport const Card = props => (\n    <div className='card-container'>\n        <img alt={props.monster.name} \n             src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\n        <h2>{ props.monster.name }</h2>\n        <p>{ props.monster.email }</p>\n\n    </div>\n    );    ","import React from 'react';\nimport { Card } from '../card/card.component';\n\nimport './card-list.styles.css'; \n\n\n\nexport const CardList = props => (\n    <div className='card-list'>\n        {props.monsters.map(monster =>       \n            <Card key={ monster.id } monster={ monster } /> \n        )}\n    </div>\n\n    );\n\n","import React from 'react';\n\nimport './search-box.styles.css';\n\n\nexport const SearchBox = ({placeholder, handleChange}) => (\n    <input  className='search'\n            type='search' \n            placeholder={placeholder}\n            onChange={handleChange} />\n);","import React, { Component } from 'react';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\n\nimport './App.css';\n\n\nclass App extends Component {\n  constructor () {\n    super();\n    this.state = {\n      monsters: [], \n      searchField: ''\n    };\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then (response => response.json())\n    .then (users => this.setState({monsters: users}));\n  }\n\n  handleChange = e => this.setState({searchField: e.target.value});\n\n  render () {\n    const { monsters, searchField } = this.state;\n    /* const filteredMonsters = monsters.filter(monster => \n      monster.name.toLowerCase().includes(searchField.toLowerCase())); */\n    const filteredMonstersName = monsters.map(monster => monster.name\n        .toLowerCase()          \n        .split(' ')\n        .filter(monsterName => monsterName.startsWith(searchField.toLowerCase()))\n        .join(' ')\n    );\n\n    const filteredMonsters = monsters.filter( monster => {\n      for (let mon of filteredMonstersName){\n        if (monster.name.toLowerCase().includes(mon) && mon.length > 0){          \n          return monster;\n        }               \n      }\n      return null \n    });\n\n    return (\n      <div className=\"App\">\n        <h1>Monster Rolodex</h1>\n        <SearchBox \n          placeholder='Search monsters...'\n          handleChange={this.handleChange}\n        />\n        <CardList monsters={filteredMonsters} />        \n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}